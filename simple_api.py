#!/usr/bin/env python
"""
Simple Flask API for serving pre-generated daily summaries
This API serves static JSON files generated by the daily cron job
"""

from flask import Flask, jsonify, request
import json
import os
from datetime import datetime
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('z-news-simple')

# Initialize Flask app
app = Flask(__name__)

@app.route('/daily-summary', methods=['GET'])
def daily_summary():
    """
    Serve pre-generated daily summary JSON
    Fast response time - no real-time processing
    """
    try:
        request_id = datetime.now().strftime('%Y%m%d%H%M%S')
        logger.info(f"Request {request_id}: Serving daily summary")
        
        # Get query parameters
        companies_param = request.args.get('companies')
        
        # Try to load the pre-generated JSON file
        json_file = 'daily_summary.json'
        
        if not os.path.exists(json_file):
            logger.warning(f"Request {request_id}: JSON file not found")
            return generate_fallback_response()
        
        # Load the JSON data
        with open(json_file, 'r') as f:
            data = json.load(f)
        
        # Filter companies if requested
        if companies_param:
            requested_companies = [name.strip() for name in companies_param.split(',')]
            original_companies = data.get('companies_included', [])
            
            # Find matching companies (case-insensitive partial match)
            matching_companies = []
            for requested in requested_companies:
                for company in original_companies:
                    if requested.lower() in company.lower():
                        matching_companies.append(company)
                        break
            
            if matching_companies:
                data['companies_included'] = matching_companies
                # Note: We don't filter the actual summary content for simplicity
                # The summary will still contain all companies, but metadata shows filtered list
        
        logger.info(f"Request {request_id}: Successfully served summary with {len(data.get('companies_included', []))} companies")
        return jsonify(data)
        
    except Exception as e:
        logger.error(f"Request error: {str(e)}")
        return generate_fallback_response()

def generate_fallback_response():
    """Generate a fallback response when JSON file is not available"""
    return jsonify({
        'date': datetime.now().strftime('%Y-%m-%d'),
        'generated_at': datetime.now().isoformat(),
        'summary': f"""# Financial Services News Summary - {datetime.now().strftime('%B %d, %Y')}

## Service Status

The daily news summary is being updated. Please check back in a few minutes for the latest financial services news and analysis.

## Next Update

The system generates fresh summaries daily at midnight PST. 

---
*This is an automated summary service for financial services industry news.*
""",
        'companies_included': ["Ameriprise Financial, Inc.", "Fidelity Investments", "Edward Jones"],
        'total_articles': 0,
        'time_period': 'recent data',
        'status': 'updating'
    })

@app.route('/healthcheck', methods=['GET'])
def healthcheck():
    """Simple healthcheck endpoint"""
    return jsonify({
        'status': 'healthy',
        'service': 'z-news-simple-api',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/status', methods=['GET'])
def status():
    """Status endpoint showing when data was last updated"""
    json_file = 'daily_summary.json'
    
    if os.path.exists(json_file):
        # Get file modification time
        mod_time = os.path.getmtime(json_file)
        mod_datetime = datetime.fromtimestamp(mod_time)
        
        # Load basic info from JSON
        try:
            with open(json_file, 'r') as f:
                data = json.load(f)
            return jsonify({
                'status': 'operational',
                'last_updated': mod_datetime.isoformat(),
                'data_date': data.get('date'),
                'total_companies': len(data.get('companies_included', [])),
                'total_articles': data.get('total_articles', 0)
            })
        except:
            return jsonify({
                'status': 'file_error',
                'last_updated': mod_datetime.isoformat()
            })
    else:
        return jsonify({
            'status': 'no_data',
            'message': 'Daily summary file not found'
        })

if __name__ == "__main__":
    app.run(debug=True, port=5001)  # Use different port to avoid conflicts